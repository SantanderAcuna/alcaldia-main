import { defineComponent, watch, computed, ref } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import { useMutation, useQuery, useQueryClient } from '@tanstack/vue-query';
import { useForm } from 'vee-validate';
import * as yup from 'yup';
import {
  createUpdateSecretaria,
  deleteSecretaria,
  getSecretariaAll,
  getSecretariaById,
} from '../actions';
import CustomInput from '@/modules/admin/components/CustomInput.vue';
import CustomTextArea from '@/modules/admin/components/CustomTextArea.vue';
import CustomInputDate from '@/modules/admin/components/CustomInputDate.vue';
import CustomDocument from '@/modules/admin/components/CustomDocument.vue';
import CustomImagen from '@/modules/admin/components/CustomImagen.vue';

import { useToast } from 'vue-toast-notification';
import type { Dependencia, Funcionario, Funciones, Tramite } from '@/modules/interfaces';
import type { ApiError } from '@/modules/interfaces/response';

interface FormValues {
  id?: number | null;
  nombre?: string;
  mision?: string;
  vision?: string;
  organigrama?: string;
  created_at?: string;
  updated_at?: string;
  funciones?: Funciones;
  dependencias?: Dependencia;
  tramites?: Tramite;
  funcionarios?: Funcionario;
}

const $toast = useToast();
const toSafeDate = (value: unknown): Date | null => {
  if (value instanceof Date) return isNaN(value.getTime()) ? null : value;
  if (typeof value === 'string' || typeof value === 'number') {
    const date = new Date(value);
    return isNaN(date.getTime()) ? null : date;
  }
  return null;
};

const validationSchema = yup.object({
  nombre_completo: yup.string().required('Nombre completo es obligatorio'),
  presentacion: yup.string().required('Presentación es obligatoria'),
  fecha_inicio: yup
    .mixed()
    .required('Fecha de inicio es obligatoria')
    .test('is-valid-date', 'Debe ser una fecha válida', (value) => {
      return toSafeDate(value) !== null;
    }),
  fecha_fin: yup
    .mixed()
    .required('Fecha de fin es obligatoria')
    .test('is-valid-date', 'Debe ser una fecha válida', (value) => {
      return toSafeDate(value) !== null;
    })
    .test('is-after-start', 'La fecha de fin debe ser posterior a la de inicio', function (value) {
      const { fecha_inicio } = this.parent;
      const startDate = toSafeDate(fecha_inicio);
      const endDate = toSafeDate(value);
      if (startDate === null || endDate === null) return false;
      return endDate > startDate;
    }),
  sexo: yup.string().required('Sexo es obligatorio').oneOf(['masculino', 'femenino']),
  actual: yup.boolean().required('Estado actual es obligatorio').default(false),
  foto_path: yup.mixed().required('La foto es obligatoria'),
  plan: yup.object({
    titulo: yup.string().required('Título del plan es obligatorio'),
    descripcion: yup.string().required('Descripción del plan es obligatoria'),
    documentos: yup
      .array()
      .of(
        yup.object({
          path: yup.string().required('Ruta del documento es obligatoria'),
          nombre: yup.string().required('Nombre del documento es obligatorio'),
        }),
      )
      .min(1, 'Debe adjuntar al menos un documento')
      .required('Los documentos son obligatorios'),
  }),
});

export default defineComponent({
  components: {
    CustomInput,
    CustomTextArea,
    CustomInputDate,
    CustomDocument,
    CustomImagen,
  },
  setup() {
    const route = useRoute();
    const router = useRouter();
    const queryClient = useQueryClient();

    const secretariaId = computed(() => Number(route.params.id));
    const API_STORAGE_URL = `${import.meta.env.VITE_API_BASE_URL}/storage`;
    const resetKey = ref(0);

    // Configuración del formulario
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { values, defineField, errors, setErrors, handleSubmit, resetForm, setFieldValue } =
      useForm<FormValues>({
        validationSchema,
        initialValues: {
          id: null,
          nombre: '',
          mision: '',
          vision: '',
          organigrama: '',
          created_at: '',
          updated_at: '',
          funciones: {
            id: null,
            nombre: '',
            orden: null,
            secretaria_id: null,
          },

          dependencias: {
            id: null,
            nombre: '',
            descripcion: '',
            secretaria_id: null,
          },

          tramites: {
            id: null,
            nombre: '',
            descripcion: '',
            dependencia_id: null,
            secretaria_id: null,
          },

          funcionarios: {
            id: undefined,
            nombres: '',
            apellidos: '',
            cargo: '',
            genero: 'M',
            foto: '',
            correo: '',
            linkendin: '',
            fecha_ingreso: '',
            secretaria_id: undefined,
            perfil_id: undefined,
            estado: '',
            created_at: '',
            updated_at: '',
            deleted_at: '',
          },
        },
      });

    // Secretaria
    const [nombre, nombreAttrs] = defineField('nombre');
    const [mision, misionAttrs] = defineField('mision');
    const [vision, visionAttrs] = defineField('vision');
    const [organigrama, organigramaAttrs] = defineField('organigrama');
    //funciones
    const [nombreFunciones, nombreFuncionesAttrs] = defineField('funciones.nombre');
    const [ordenFunciones, ordenFuncionesAttrs] = defineField('funciones.orden');

    //dependencias

    const [nombreDependencia, nombreDependenciaAttrs] = defineField('dependencias.nombre');
    const [descripcionDependencia, descripcionDependenciaAttrs] = defineField(
      'dependencias.descripcion',
    );

    // Tramites
    const [nombreTramites, nombreTramitesAttrs] = defineField('tramites.nombre');
    const [descripcionTramites, descripcionTramitesAttrs] = defineField('tramites.descripcion');

    // Funcionarios

    const [nombres, nombresAttrs] = defineField('funcionarios.nombres');
    const [apellidos, apellidosAttrs] = defineField('funcionarios.apellidos');
    const [cargo, cargoAttrs] = defineField('funcionarios.cargo');
    const [genero, generoAttrs] = defineField('funcionarios.genero');
    const [correo, correoAttrs] = defineField('funcionarios.correo');
    const [linkendin, linkendinAttrs] = defineField('funcionarios.linkendin');
    const [fecha_ingreso, fecha_ingresoAttrs] = defineField('funcionarios.fecha_ingreso');
    const [estado, estadoAttrs] = defineField('funcionarios.estado');

    // Query para obtener datos de la secretaria
    const { data: secretariaData, error: queryError } = useQuery({
      queryKey: ['secretaria', secretariaId.value],
      queryFn: () => getSecretariaById(secretariaId.value),
      enabled: !!secretariaId.value,
      staleTime: 30000,
    });

    watch(queryError, (error) => {
      if (error) {
        $toast.error(error.message || 'Error al cargar los datos');
        console.error('Error loading :', error);
      }
    });

    // Cargar datos en el formulario

    watch(
      () => secretariaData.value,
      (resp) => {
        const secretaria = resp?.data;
        // Verificamos primero la estructura real de los datos

        // Extraemos los datos reales del alcalde de manera segura

        if (!secretaria) {
          $toast.info('Cargando informacion');
          return;
        }

        try {
          // Manejo flexible de funcionarios

          const funcionamiento = Array.isArray(secretaria.funciones)
            ? secretaria.funciones.length > 0
              ? secretaria.funciones[0]
              : null
            : secretaria.funciones;

          const dependencia = Array.isArray(secretaria.dependencias)
            ? secretaria.dependencias.length > 0
              ? secretaria.dependencias[0]
              : null
            : secretaria.dependencias;

          const tramite = Array.isArray(secretaria.tramites)
            ? secretaria.tramites.length > 0
              ? secretaria.tramites[0]
              : null
            : secretaria.tramites;

          const funcionario = Array.isArray(secretaria.funcionarios)
            ? secretaria.funcionarios.length > 0
              ? secretaria.funcionarios[0]
              : null
            : secretaria.funcionarios;

          const valoresFormulario: FormValues = {
            id: secretaria.id,
            nombre: secretaria.nombre || '',
            mision: secretaria.mision || '',
            vision: secretaria.vision || '',
            organigrama: secretaria.organigrama || '',

            funciones: {
              id: funcionamiento?.id,
              nombre: funcionamiento?.nombre,
              orden: funcionamiento?.orden,
              secretaria_id: funcionamiento?.secretaria_id,
            },
            dependencias: {
              id: dependencia?.id,
              nombre: dependencia?.nombre,
              descripcion: dependencia?.descripcion,
              secretaria_id: dependencia?.secretaria_id,
            },
            tramites: {
              id: tramite?.id,
              nombre: tramite?.nombre,
              descripcion: tramite?.descripcion,
              dependencia_id: tramite?.dependencia_id,
              secretaria_id: tramite?.secretaria_id,
            },

            funcionarios: {
              id: funcionario?.id,
              nombres: funcionario?.nombres || undefined,
              apellidos: funcionario?.apellidos || undefined,
              cargo: funcionario?.cargo || undefined,
              genero: funcionario?.genero || undefined,
              foto: funcionario?.foto || undefined,
              correo: funcionario?.correo || undefined,
              linkendin: funcionario?.linkendin || undefined,
              fecha_ingreso: funcionario?.fecha_ingreso || undefined,
              estado: funcionario?.estado || undefined,
            },
          };

          resetForm({
            values: valoresFormulario,
          });

          resetKey.value++;
        } catch (error) {
          console.error('Error al procesar datos :', error);
          $toast.error('Error al cargar los datos ');
        }
      },
      { immediate: true, deep: true },
    );

    // Query para listar secretarias (para usar en otros componentes)
    const fetchAlcaldes = (page: number = 1, limit: number = 10) => {
      return useQuery({
        queryKey: ['secretaria', page, limit],
        queryFn: () => getSecretariaAll(page, limit),
        staleTime: 30000,
      });
    };

    // Mutation para crear/actualizar
    const { mutate, isPending } = useMutation({
      mutationFn: createUpdateSecretaria,
      onSuccess: () => {
        // Invalidar las queries relacionadas
        queryClient.invalidateQueries({ queryKey: ['secretaria', secretariaId.value] });
        queryClient.invalidateQueries({ queryKey: ['secretaria'] });
        router.push('/admin/secretarias-admin');
        $toast.success('Secretaria guardado exitosamente');
      },
      onError: (error: ApiError) => {
        if (error.status === false) {
          $toast.error(error.message || 'Error al guardar');
        }
      },
    });

    // Mutation para eliminar alcalde
    const { mutate: deleteMutation } = useMutation({
      mutationFn: (id: number) => deleteSecretaria(id),
      onSuccess: () => {
        queryClient.invalidateQueries({ queryKey: ['secretarias'] });
        $toast.success('Secretaria eliminado exitosamente');
        router.push('/admin/secretarias-admin');
      },
      onError: (error: ApiError) => {
        $toast.error(error.message || 'Error al eliminar la secretaria');
      },
    });

    // Función para eliminar alcalde
    const eliminarAlcalde = () => {
      if (!values.id) return;
      if (confirm('¿Estás seguro de eliminar esta informacion?')) {
        deleteMutation(values.id);
      }
    };

    // Documentos existentes
    // const existingDocuments = computed(() => {
    //   return (values.plan?.documentos || [])
    //     .filter((doc): doc is { id: number; nombre: string; path: string } => !!doc.id)
    //     .map((doc) => ({
    //       id: doc.id,
    //       nombre: doc.nombre,
    //       path: doc.path,
    //     }));
    // });

    // Eliminar documento existente
    // const removeExistingDocument = (id: number) => {
    //   const updatedDocs = values.plan?.documentos?.filter((doc) => doc.id !== id) || [];
    //   setFieldValue('plan.documentos', updatedDocs);
    //   resetKey.value++;
    // };

    // Actualizar la firma de la función
    // const formatDateForSubmit = (date: string | null | undefined): string => {
    //   if (!date) return '';
    //   try {
    //     const parsedDate = new Date(date);
    //     return isNaN(parsedDate.getTime()) ? '' : parsedDate.toISOString().split('T')[0];
    //   } catch {
    //     return '';
    //   }
    // };

    const formatDateForSubmit = (date: string | null | undefined): string => {
      if (!date) return '';
      try {
        const parsedDate = new Date(date);
        return isNaN(parsedDate.getTime()) ? '' : parsedDate.toISOString().split('T')[0];
      } catch {
        return '';
      }
    };

    // Envío del formulario
    const onSubmit = handleSubmit(async (formValues) => {
      const formData = new FormData();

      const formattedStartDate = formatDateForSubmit(formValues.funcionarios?.fecha_ingreso);

      if (!formattedStartDate) {
        $toast.error('Las fechas son requeridas y deben ser válidas');
        return;
      }

      // Campos básicos

      if (!formValues.nombre) {
        throw new Error('El campo nombre es requerido');
      }

      formData.append('nombre', formValues.nombre || '');

      if (!formValues.mision) {
        throw new Error('El campo mision es requerido');
      }

      formData.append('mision', formValues.mision || '');

      if (!formValues.vision) {
        throw new Error('El campo vision es requerido');
      }

      formData.append('vision', formValues.vision || '');

      if (!formValues.organigrama) {
        throw new Error('El campo organigrama es requerido');
      }

      formData.append('organigrama', formValues.organigrama || '');

      if (!formValues.funcionarios?.nombres) {
        throw new Error('El campo nombres es requerido');
      }
      formData.append('funcionario[nombres]', formValues.funcionarios.nombres || '');

      if (!formValues.funcionarios?.apellidos) {
        throw new Error('El campo apellidos es requerido');
      }

      formData.append('funcionario[apellidos]', formValues.funcionarios.apellidos || '');

      if (!formValues.funcionarios?.cargo) {
        throw new Error('El campo cargo es requerido');
      }
      formData.append('funcionario[cargo]', formValues.funcionarios.cargo || '');

      if (!formValues.funcionarios?.genero) {
        throw new Error('El campo genero es requerido');
      }
      formData.append('funcionario[genero]', formValues.funcionarios.genero || '');

      if (!formValues.funcionarios?.foto) {
        throw new Error('El campo foto es requerido');
      }

      formData.append('funcionario[foto]', formValues.funcionarios.foto || '');

      if (!formValues.funcionarios?.correo) {
        throw new Error('El campo correo es requerido');
      }

      formData.append('funcionario[correo]', formValues.funcionarios.correo || '');

      if (!formValues.funcionarios?.linkendin) {
        throw new Error('El campo linkendin es requerido');
      }

      formData.append('funcionario[linkendin]', formValues.funcionarios.linkendin || '');

      if (!formValues.funcionarios?.estado) {
        throw new Error('El campo estado es requerido');
      }

      formData.append('funcionario[estado]', formValues.funcionarios.estado || '');

      // ID para actualización
      if (formValues.id) {
        formData.append('id', formValues.id.toString());
        formData.append('_method', 'PATCH');
      }

      // Foto - verificación segura de tipos
      if (isFile(formValues.funcionarios.foto)) {
        formData.append('foto', formValues.funcionarios.foto);
      } else if (isFilePath(formValues.funcionarios.foto)) {
        formData.append('foto', formValues.funcionarios.foto);
      }

      if (isFile(formValues.organigrama)) {
        formData.append('organigrama', formValues.organigrama);
      } else if (isFilePath(formValues.organigrama)) {
        formData.append('organigrama', formValues.organigrama);
      }

      mutate(formData);
    });

    // Función de tipo guarda para verificar si es File
    const isFile = (value: unknown): value is File => {
      return typeof value === 'object' && value !== null && value instanceof File;
    };

    // Función para verificar si es string de ruta válida
    const isFilePath = (value: unknown): value is string => {
      return typeof value === 'string' && value.trim() !== '';
    };

    // URLs para visualización

    const fileOrganigrama = computed(() => ({
      organigrama: isFile(values.organigrama)
        ? URL.createObjectURL(values.organigrama)
        : isFilePath(values.organigrama)
          ? `${API_STORAGE_URL}/${values.organigrama}`
          : null,
    }));

    const fileFoto = computed(() => ({
      organigrama: isFile(values.funcionarios?.foto)
        ? URL.createObjectURL(values.funcionarios?.foto)
        : isFilePath(values.funcionarios?.foto)
          ? `${API_STORAGE_URL}/${values.funcionarios?.foto}`
          : null,
    }));

    return {
      values,
      errors,
      isPending,
      fileOrganigrama,
      fileFoto,
      resetKey,
      nombre,
      nombreAttrs,
      mision,
      misionAttrs,
      vision,
      visionAttrs,
      organigrama,
      organigramaAttrs,
      nombreFunciones,
      nombreFuncionesAttrs,
      ordenFunciones,
      ordenFuncionesAttrs,
      nombreDependencia,
      nombreDependenciaAttrs,
      descripcionDependencia,
      descripcionDependenciaAttrs,
      nombreTramites,
      nombreTramitesAttrs,
      descripcionTramites,
      descripcionTramitesAttrs,
      nombres,
      nombresAttrs,
      apellidos,
      apellidosAttrs,
      cargo,
      cargoAttrs,
      genero,
      generoAttrs,
      correo,
      correoAttrs,
      linkendin,
      linkendinAttrs,
      fecha_ingreso,
      fecha_ingresoAttrs,
      estado,
      estadoAttrs,

      // existingDocuments,
      // removeExistingDocument,
      onSubmit,
      eliminarAlcalde,
      fetchAlcaldes,
    };
  },
});
